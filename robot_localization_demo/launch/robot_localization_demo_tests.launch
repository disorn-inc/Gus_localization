<launch>

  <!-- visualization node to show the real turtle, the measurements and the estimated position -->
  <!--node pkg="turtlesim" type="turtlesim_node" name="turtlesim" /-->

  <!-- 'turtle positioning system', transforming the position of the real turtle to a noisy measurement at a given frequency -->
  <!--node pkg="robot_localization_demo" type="positioning_system_node" name="turtle1_positioning_system_node"
        args="-f 1. -x 0.2 -y 0.2 -t 0.2 -v" output="screen" /-->

  <!-- 'Turtletf_Vector3Stamped_to_ImuData' -->
  <!--node pkg="robot_localization_demo" type="tf_Vector3Stamped_to_ImuData_node" name="turtle1_tf_Vector3Stamped_to_ImuData_node"
        args="-f 20. -x 0.0 -y 0.0 -t 0.0 -v" output="screen" /-->

  <!-- 'turtle odometry node', transforming the movements of the real turtle to a noisy measurement at a given frequency -->
  <!--node pkg="robot_localization_demo" type="odometry_node" name="turtle1_odometry_node"
        args="-f 20. -x 0. -X 0. -y 0. -Y 0. -v" output="screen" /-->

  <!-- 'turtle imudata node', transforming the movements of the real turtle to a noisy measurement at a given frequency -->
  <!--node pkg="robot_localization_demo" type="imu_data_node" name="turtle1_imu_data_node"
        args="-f 20. -x 0. -X 0. -y 0. -Y 0. -t 0 -T 0. -v" output="screen" /-->

  <!-- 'tf_Pose2d_to_PoseWithCovar_node', transforming the Pose2D to PoseWithCovariance-->
  <node pkg="tf_vec3_and_imu_to_imu_msg" type="tf_Pose2d_to_PoseWithCovar_node" name="LORD_tf_Pose2d_to_PoseWithCovar"
        args="-f 20. -x 0.0 -y 0.0 -t 0.0 -v" output="screen" />

  <!-- 'tf_Odometry_to_ImuData_node', transforming the Pose2D to PoseWithCovariance-->
  <node pkg="tf_vec3_and_imu_to_imu_msg" type="tf_Odometry_to_ImuData_node" name="Attitude_tf_Odometry_to_ImuData_node"
        args="-f 20. -x 0.0 -y 0.0 -t 0.0 -v" output="screen" />

  <!--node pkg="tf" type="static_transform_publisher" name="base_odom" args="0 0 0 0 0 0 odom base_link 100" /-->
  <node pkg="tf" type="static_transform_publisher" name="base_imu" args="0 0 0 0 0 0 base_link imu_link 100" />
  <!--node pkg="tf" type="static_transform_publisher" name="created_imu" args="0 0 0 0 0 0 base_link base_imu2 100" /-->

  <!--node pkg="tf_vec3_and_imu_to_imu_msg" type="tf_Vector3Stamped_to_ImuData_node" name="LORD_tf_vec3_and_imu_to_imu_msg"
        args="-f 20. -x 0.0 -y 0.0 -t 0.0 -v" output="screen" /-->

  
  <!--node pkg="tf" type="static_transform_publisher" name="base_odom" args="0 0 0 0 0 0 map odom 100" /-->
  <!-- transformation visualization node, visualizing the estimated position of the turtle in the map frame -->

  <!--node pkg="test2_node_intermediate" type="teleop_node_intermediate.py" name="teleop_node_intermediate" /-->

  <!-- robot_localization EKF node for the odom frame -->
  <node pkg="robot_localization" type="ekf_localization_node" name="robot_localization_ekf_node_attitude" clear_params="true">
    <param name="frequency" value="10." />  
    <param name="sensor_timeout" value="0.2" />  
    <param name="two_d_mode" value="true" />
    <param name="publish_tf" value="true" />
    <param name="map_frame" value="map" />
    <param name="odom_frame" value="odom" />
    <param name="base_link_frame" value="base_link" />
    <param name="world_frame" value="odom" />
    <remap from="odometry/filtered" to="odometry/robot_localization_attitude" />
    <param name="print_diagnostics" value="true" />

    <!--param name="twist0" value="turtle1/sensors/twist" />
    <param name="twist0_differential" value="false"/>
    <rosparam param="twist0_config">[false, false, false, false, false, false,
                                     true, true, false, false, false, true,
                                     false, false, false]</rosparam-->

    <param name="pose0" value="created/PoseWCStamped" />
    <param name="pose0_differential" value="true"/>
    <rosparam param="pose0_config">[ true, true, true, true, true, true,
                                     false, false, false, false, false, false,
                                     false, false, false]</rosparam>

    <param name="imu0" value="gx5/imu/data" />
    <param name="imu0_differential" value="true"/>
    <param name="imu0_relative" value="true"/>
    <rosparam param="imu0_config">[ false, false, false, false, false, false,
                                     false, false, false, true, true, true,
                                     true, true, true]</rosparam>

    <!--param name="imu1" value="imu/data" />
    <param name="imu1_differential" value="true"/>
    <rosparam param="imu1_config">[ false, false, false, true, true, true,
                                     false, false, false, true, true, true,
                                     true, true, true]</rosparam>

    <param name="imu2" value="imu/data_madgwick" />
    <param name="imu2_differential" value="false"/>
    <param name="imu2_relative" value="false"/>
    <rosparam param="imu2_config">[ false, false, false, true, true, true,
                                     false, false, false, true, true, true,
                                     true, true, true]</rosparam-->
  </node>

  <!-- Excecute play ROSBAG -->
  <node pkg="rosbag" type="play" name="player" output="screen" args="/home/divel2/CSV\ Files\ IMU\ tests/Test3\ -\ orientation/2019-11-14-16-27-02\(test3\).bag"/>

  <!-- Excecute record ROSBAG -->
  <!--node pkg="rosbag" type="record" name="recorder" output="screen" args="record -O /home/divel2 -a" launch-prefix="xterm -e"/-->

  <!-- robot_localization EKF node for the map frame -->
  <!--node pkg="robot_localization" type="ekf_localization_node" name="robot_localization_ekf_node_rel"  clear_params="true">
    <param name="frequency" value="10" />  
    <param name="sensor_timeout" value="0.2" />  
    <param name="two_d_mode" value="true" />
    <param name="publish_tf" value="true" />
    <param name="map_frame" value="map" />
    <param name="odom_frame" value="odom" />
    <param name="base_link_frame" value="base_link" />
    <param name="world_frame" value="odom" />

    <param name="imu0" value="imu/cf/data" />
    <param name="imu0_differential" value="false"/>
    <param name="imu0_relative" value="true"/>
    <rosparam param="imu0_config">[  false, false, false, true, true, true,
                                     false, false, false, false, false, false,
                                     false, false, false]</rosparam>

    <param name="pose0" value="turtle1/sensors/pose" />
    <rosparam param="pose0_config">[true, true, false, false, false, true,
                                    false, false, false, false, false, false,
                                    false, false, false]</rosparam>
    <remap from="odometry/filtered" to="odometry/robot_localization_rel"/>
  </node-->

    <!-- keyboard control for the real turtle -->
  <!--node pkg="teleop_twist_keyboard" type="teleop_twist_keyboard.py" name="teleop" output="screen" >
    <remap from="cmd_vel" to="turtle1/cmd_vel" />
  </node-->

  <!-- transformation visualization node, visualizing the estimated position of the turtle in the map frame -->

  <!--node pkg="robot_localization_demo" type="transformation_visualization_node" name="transformation_visualization_node" /-->

</launch> 